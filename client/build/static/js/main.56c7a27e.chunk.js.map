{"version":3,"sources":["assets/cards sync /^/.*/.svg$","assets/cards/BACK.svg","assets/cards/CLUBS/CLUBS_10.svg","assets/cards/CLUBS/CLUBS_2.svg","assets/cards/CLUBS/CLUBS_3.svg","assets/cards/CLUBS/CLUBS_4.svg","assets/cards/CLUBS/CLUBS_5.svg","assets/cards/CLUBS/CLUBS_6.svg","assets/cards/CLUBS/CLUBS_7.svg","assets/cards/CLUBS/CLUBS_8.svg","assets/cards/CLUBS/CLUBS_9.svg","assets/cards/CLUBS/CLUBS_A.svg","assets/cards/CLUBS/CLUBS_J.svg","assets/cards/CLUBS/CLUBS_K.svg","assets/cards/CLUBS/CLUBS_Q.svg","assets/cards/DIAMONDS/DIAMONDS_10.svg","assets/cards/DIAMONDS/DIAMONDS_2.svg","assets/cards/DIAMONDS/DIAMONDS_3.svg","assets/cards/DIAMONDS/DIAMONDS_4.svg","assets/cards/DIAMONDS/DIAMONDS_5.svg","assets/cards/DIAMONDS/DIAMONDS_6.svg","assets/cards/DIAMONDS/DIAMONDS_7.svg","assets/cards/DIAMONDS/DIAMONDS_8.svg","assets/cards/DIAMONDS/DIAMONDS_9.svg","assets/cards/DIAMONDS/DIAMONDS_A.svg","assets/cards/DIAMONDS/DIAMONDS_J.svg","assets/cards/DIAMONDS/DIAMONDS_K.svg","assets/cards/DIAMONDS/DIAMONDS_Q.svg","assets/cards/HEARTS/HEARTS_10.svg","assets/cards/HEARTS/HEARTS_2.svg","assets/cards/HEARTS/HEARTS_3.svg","assets/cards/HEARTS/HEARTS_4.svg","assets/cards/HEARTS/HEARTS_5.svg","assets/cards/HEARTS/HEARTS_6.svg","assets/cards/HEARTS/HEARTS_7.svg","assets/cards/HEARTS/HEARTS_8.svg","assets/cards/HEARTS/HEARTS_9.svg","assets/cards/HEARTS/HEARTS_A.svg","assets/cards/HEARTS/HEARTS_J.svg","assets/cards/HEARTS/HEARTS_K.svg","assets/cards/HEARTS/HEARTS_Q.svg","assets/cards/SPADES/SPADES_10.svg","assets/cards/SPADES/SPADES_2.svg","assets/cards/SPADES/SPADES_3.svg","assets/cards/SPADES/SPADES_4.svg","assets/cards/SPADES/SPADES_5.svg","assets/cards/SPADES/SPADES_6.svg","assets/cards/SPADES/SPADES_7.svg","assets/cards/SPADES/SPADES_8.svg","assets/cards/SPADES/SPADES_9.svg","assets/cards/SPADES/SPADES_A.svg","assets/cards/SPADES/SPADES_J.svg","assets/cards/SPADES/SPADES_K.svg","assets/cards/SPADES/SPADES_Q.svg","utils/randomCodeGenerator.js","utils/UserContext.js","components/utils/CustomInputField.js","components/auth/SignIn.js","components/auth/SignUp.js","components/Homepage/WaitingButton.js","components/Homepage/GameCodeModal.js","components/Homepage/Homepage.js","utils/deck.js","utils/shuffleArray.js","utils/gameFunctions.js","components/Game/Card.js","components/utils/Spinner.js","components/Game/Cards.js","assets/sounds/shuffling-cards-1.mp3","assets/sounds/check-sound.mp3","assets/sounds/chips-sound.mp3","assets/sounds/card-flip.mp3","components/Game/RaiseModal.js","components/Game/Game.js","components/auth/Verify.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","UserContext","createContext","CustomInputField","_ref","type","label","name","error","touched","_jsx","Field","children","_ref2","field","_jsxs","FormControl","isInvalid","FormLabel","htmlFor","Input","_objectSpread","FormErrorMessage","url","process","initialValues","email","password","validationSchema","Yup","shape","required","SignIn","props","response","setResponse","useState","user","setUser","useContext","isOpen","onOpen","onClose","useDisclosure","_Fragment","Button","onClick","Modal","motionPreset","isCentered","ModalOverlay","ModalContent","className","width","padding","ModalCloseButton","ModalBody","justify","align","VStack","spacing","Heading","size","username","variant","colorScheme","async","fetch","concat","method","credentials","onSignOut","closeOnOverlayClick","ModalHeader","Alert","w","mb","borderRadius","status","AlertIcon","AlertDescription","Formik","onSubmit","values","actions","body","res","headers","JSON","stringify","json","onSignIn","setSubmitting","errors","isSubmitting","isValid","Form","Spacer","isLoading","isDisabled","ModalFooter","confirmPassword","min","max","oneOf","SignUp","message","onSignUp","WaitingButton","onTrigger","queueLength","Popover","flip","returnFocusOnClose","PopoverTrigger","Portal","PopoverContent","p","PopoverArrow","PopoverCloseButton","PopoverBody","HStack","s","Spinner","Text","room","GameCodeModal","roomCode","setRoomCode","Redirect","to","toUpperCase","_ref3","socket","Homepage","waiting","setWaiting","waitingToggle","setWaitingToggle","setCode","useEffect","options","forceNew","reconnectionAttempts","Infinity","transports","io","connect","emit","off","on","users","slice","id1","id2","randomCodeGenerator","Flex","flexDir","m","color","shuffleArray","deck","location1","location2","tmp","getHand","pDeck","hDeck","valueMatch","suitMatch","twoMatches","threeMatches","fourMatches","hand","playerDeck","filter","item","houseDeck","combined","value","suit","descending","sort","a","b","suits","forEach","x","push","Straight","includes","StraightFlush","some","FiveHigh","SteelWheel","primary","descendingFiltered","secondary","tertiary","diamonds","clubs","spades","hearts","checkFlush","getWinner","p1","p2","hand1","hand2","rank1","getRank","rank2","handType","rank","Card","alt","src","require","default","Cards","numberOfTurns","player1Deck","player2Deck","gameOver","currentUser","player1Chips","player2Chips","turn","winner","player1Name","player2Name","p1Heading","setP1Heading","p2Heading","setP2Heading","houseHeading","setHouseHeading","my","fontFamily","style","fontWeight","gridGap","flexWrap","RaiseModal","raise","round","minRaise","typeError","lessThan","maxRaise","border","raiseHandler","h","Game","data","queryString","parse","location","search","setRoom","roomFull","setRoomFull","setUsers","setCurrentUser","setGameOver","setWinner","setTurn","setNumberOfTurns","setPlayer1Deck","setPlayer2Deck","setHouseDeck","setPlayer1Chips","setPlayer2Chips","increment","setIncrement","pot","setPot","raiseAmount","setRaiseAmount","setPlayer1Name","setPlayer2Name","playShufflingSound","useSound","shufflingSound","playChipsSound","chipsSound","playCardFlipSound","cardFlipSound","playCheckSound","checkSound","localHand","setLocalHand","callHandler","shuffledCards","DECK_OF_CARDS","splice","setShuffledDeck","undefined","_ref4","shuffledDeck","restart","setRestart","Box","position","top","left","translate","backgroundColor","mt","initialValue","amount","parseInt","Verify","loading","setLoading","verified","setVerified","then","Link","textDecoration","theme","extendTheme","styles","global","bg","App","mode","console","fetchData","Provider","ChakraProvider","Route","path","exact","component","ReactDOM","render","React","StrictMode","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.56c7a27e.chunk.js","sourcesContent":["var map = {\n\t\"./BACK.svg\": 317,\n\t\"./CLUBS/CLUBS_10.svg\": 318,\n\t\"./CLUBS/CLUBS_2.svg\": 319,\n\t\"./CLUBS/CLUBS_3.svg\": 320,\n\t\"./CLUBS/CLUBS_4.svg\": 321,\n\t\"./CLUBS/CLUBS_5.svg\": 322,\n\t\"./CLUBS/CLUBS_6.svg\": 323,\n\t\"./CLUBS/CLUBS_7.svg\": 324,\n\t\"./CLUBS/CLUBS_8.svg\": 325,\n\t\"./CLUBS/CLUBS_9.svg\": 326,\n\t\"./CLUBS/CLUBS_A.svg\": 327,\n\t\"./CLUBS/CLUBS_J.svg\": 328,\n\t\"./CLUBS/CLUBS_K.svg\": 329,\n\t\"./CLUBS/CLUBS_Q.svg\": 330,\n\t\"./DIAMONDS/DIAMONDS_10.svg\": 331,\n\t\"./DIAMONDS/DIAMONDS_2.svg\": 332,\n\t\"./DIAMONDS/DIAMONDS_3.svg\": 333,\n\t\"./DIAMONDS/DIAMONDS_4.svg\": 334,\n\t\"./DIAMONDS/DIAMONDS_5.svg\": 335,\n\t\"./DIAMONDS/DIAMONDS_6.svg\": 336,\n\t\"./DIAMONDS/DIAMONDS_7.svg\": 337,\n\t\"./DIAMONDS/DIAMONDS_8.svg\": 338,\n\t\"./DIAMONDS/DIAMONDS_9.svg\": 339,\n\t\"./DIAMONDS/DIAMONDS_A.svg\": 340,\n\t\"./DIAMONDS/DIAMONDS_J.svg\": 341,\n\t\"./DIAMONDS/DIAMONDS_K.svg\": 342,\n\t\"./DIAMONDS/DIAMONDS_Q.svg\": 343,\n\t\"./HEARTS/HEARTS_10.svg\": 344,\n\t\"./HEARTS/HEARTS_2.svg\": 345,\n\t\"./HEARTS/HEARTS_3.svg\": 346,\n\t\"./HEARTS/HEARTS_4.svg\": 347,\n\t\"./HEARTS/HEARTS_5.svg\": 348,\n\t\"./HEARTS/HEARTS_6.svg\": 349,\n\t\"./HEARTS/HEARTS_7.svg\": 350,\n\t\"./HEARTS/HEARTS_8.svg\": 351,\n\t\"./HEARTS/HEARTS_9.svg\": 352,\n\t\"./HEARTS/HEARTS_A.svg\": 353,\n\t\"./HEARTS/HEARTS_J.svg\": 354,\n\t\"./HEARTS/HEARTS_K.svg\": 355,\n\t\"./HEARTS/HEARTS_Q.svg\": 356,\n\t\"./SPADES/SPADES_10.svg\": 357,\n\t\"./SPADES/SPADES_2.svg\": 358,\n\t\"./SPADES/SPADES_3.svg\": 359,\n\t\"./SPADES/SPADES_4.svg\": 360,\n\t\"./SPADES/SPADES_5.svg\": 361,\n\t\"./SPADES/SPADES_6.svg\": 362,\n\t\"./SPADES/SPADES_7.svg\": 363,\n\t\"./SPADES/SPADES_8.svg\": 364,\n\t\"./SPADES/SPADES_9.svg\": 365,\n\t\"./SPADES/SPADES_A.svg\": 366,\n\t\"./SPADES/SPADES_J.svg\": 367,\n\t\"./SPADES/SPADES_K.svg\": 368,\n\t\"./SPADES/SPADES_Q.svg\": 369\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 160;","export default __webpack_public_path__ + \"static/media/BACK.853a852d.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_10.99da3686.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_2.78f19057.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_3.6e08d9a8.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_4.a45dba6c.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_5.356ce962.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_6.9f685834.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_7.4d22a1f9.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_8.8eb38da5.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_9.c4a7506a.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_A.55c41002.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_J.5b753d05.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_K.560247c0.svg\";","export default __webpack_public_path__ + \"static/media/CLUBS_Q.bd01ab86.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_10.8514b127.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_2.a73d1531.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_3.5115a8c7.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_4.4fd0d8f3.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_5.87086dfd.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_6.14df799c.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_7.fb306d7d.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_8.bb2937a0.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_9.c65e89b4.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_A.15971b8b.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_J.65ad3dbc.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_K.b6117fb3.svg\";","export default __webpack_public_path__ + \"static/media/DIAMONDS_Q.31557adc.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_10.85947618.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_2.94fa46e2.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_3.b3f08888.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_4.b3ef5be8.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_5.4a92723e.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_6.6b3e86ce.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_7.80064471.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_8.48fac022.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_9.73433ccf.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_A.0ed45f9e.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_J.fc92ee18.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_K.c3073a6b.svg\";","export default __webpack_public_path__ + \"static/media/HEARTS_Q.2b5293f1.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_10.caacd048.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_2.0fa30f72.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_3.33dda4a9.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_4.da7c1382.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_5.31e4c30b.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_6.79464e84.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_7.53951d96.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_8.41237048.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_9.549dee87.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_A.ee3ed901.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_J.cbe6feb8.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_K.9a00c2da.svg\";","export default __webpack_public_path__ + \"static/media/SPADES_Q.2f3a0406.svg\";","/**\r\n * Genera una cadena aleatoria de letras mayúsculas.\r\n *\r\n * Se utiliza para crear identificadores o códigos alfanuméricos,\r\n * pero en esta versión únicamente emplea caracteres A–Z.\r\n *\r\n * @param {number} length - Longitud deseada de la cadena resultante.\r\n * @returns {string} Cadena aleatoria compuesta por letras mayúsculas.\r\n */\r\nexport default function makeid(length) {\r\n    var result           = '';\r\n    //var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    var charactersLength = characters.length;\r\n    for ( var i = 0; i < length; i++ ) {\r\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n}\r\n","/**\r\n * Contexto global de usuario para Poker Royal\r\n *\r\n * Este módulo crea y exporta un contexto de React (`UserContext`) utilizado\r\n * para compartir el estado de autenticación del usuario (datos como id, email,\r\n * username) a lo largo de la aplicación, sin prop drilling.\r\n *\r\n * - El valor inicial es `null` hasta que se verifica la sesión.\r\n * - Se consume mediante `useContext(UserContext)` en componentes que necesiten\r\n *   acceder o actualizar la información del usuario.\r\n */\r\nimport { createContext } from 'react'\r\n\r\nexport const UserContext = createContext(null)","/**\r\n * CustomInputField\r\n *\r\n * Componente de campo de formulario integrado con Formik y Chakra UI.\r\n *\r\n * Props:\r\n * @param {string} type    - Tipo de input (p.ej. \"text\", \"password\", \"email\").\r\n * @param {string} label   - Etiqueta que se mostrará encima del input.\r\n * @param {string} name    - Nombre del campo, utilizado por Formik para el binding.\r\n * @param {string} error   - Mensaje de error proveniente de Formik/Yup.\r\n * @param {boolean} touched - Indica si el campo ha sido tocado para mostrar errores.\r\n *\r\n * Funcionamiento:\r\n * - Usa <Field> de Formik para conectar el input al estado del formulario.\r\n * - Envuelve el input en <FormControl> de Chakra, mostrando errores cuando\r\n *   `error` y `touched` son truthy.\r\n * - Renderiza <FormLabel>, <Input> y <FormErrorMessage> automáticamente.\r\n */\r\nimport React from 'react';\r\nimport { Field } from 'formik';\r\nimport {\r\n    FormControl,\r\n    FormLabel,\r\n    FormErrorMessage,\r\n    Input\r\n} from '@chakra-ui/react';\r\n\r\nexport default function CustomInputField({ type, label, name, error, touched }) {\r\n    return (\r\n        <Field type={type} name={name}>\r\n            {({ field }) => (\r\n                <FormControl isInvalid={error && touched}>\r\n                    <FormLabel htmlFor={name}>{label}</FormLabel>\r\n                    <Input {...field} type={type} id={name} />\r\n                    <FormErrorMessage>{error}</FormErrorMessage>\r\n                </FormControl>\r\n            )}\r\n        </Field>\r\n    );\r\n}\r\n","/**\r\n * Componente SignIn:\r\n * ------------------\r\n * Este componente permite a los usuarios iniciar sesión o cerrar sesión:\r\n *  - Si el usuario está autenticado (user en contexto), muestra un botón \"Profile\" que abre un modal:\r\n *      • Muestra el nombre de usuario y un botón \"Sign Out\" para cerrar sesión.\r\n *      • Al hacer logout llama al endpoint `/auth/signout` y limpia el contexto.\r\n *  - Si no hay usuario, muestra un botón \"Sign In\" que abre un modal con un formulario Formik:\r\n *      • Campos: email y password, validados con Yup (requeridos).\r\n *      • Al enviar, realiza POST a `/auth/signin`, guarda la respuesta en contexto o muestra error.\r\n *      • Los errores se muestran en un Alert de Chakra UI.\r\n *  - Usa `useDisclosure` para controlar la apertura/cierre del modal.\r\n */\r\nimport React, { useState, useContext } from 'react'\r\nimport { UserContext } from '../../utils/UserContext'\r\nimport { Formik, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport CustomInputField from '../utils/CustomInputField'\r\nimport {\r\n    Button,\r\n    Alert,\r\n    AlertIcon,\r\n    VStack,\r\n    Heading,\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalHeader,\r\n    ModalContent,\r\n    ModalCloseButton,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Spacer,\r\n    useDisclosure,\r\n    AlertDescription\r\n} from '@chakra-ui/react'\r\n\r\nconst url = process.env.REACT_APP_ENDPOINT\r\n\r\nconst initialValues = {\r\n    email: '',\r\n    password: ''\r\n}\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email: Yup.string().required('Required'),\r\n    password: Yup.string().required('Required')\r\n})\r\n\r\nexport default function SignIn(props) {\r\n    const [response, setResponse] = useState(null)\r\n    const { user, setUser } = useContext(UserContext)\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    async function onSignIn(values) {\r\n        const body = { email: values.email, password: values.password }\r\n        var res = await fetch(`${url}/auth/signin`, {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(body)\r\n        })\r\n        res = await res.json()\r\n        if (res.user) setUser(res.user)\r\n        else setResponse(res)\r\n    }\r\n\r\n    async function onSignOut() {\r\n        await fetch(`${url}/auth/signout`, { method: 'POST', credentials: 'include' })\r\n        setUser(null)\r\n        setResponse(null)\r\n    }\r\n\r\n    if (user) return (\r\n        <>\r\n        <Button {...props} onClick={onOpen}>Profile</Button>\r\n        <Modal motionPreset=\"slideInBottom\" isOpen={isOpen} onClose={onClose} isCentered>\r\n            <ModalOverlay/>\r\n            <ModalContent className=\"noselect\" width=\"20rem\" padding=\"1.5rem\" >\r\n            <ModalCloseButton/>\r\n            <ModalBody justify=\"center\" align=\"center\">\r\n                <VStack spacing=\"1rem\" >\r\n                    <Heading size=\"lg\">You're signed in as {user.username}</Heading>\r\n                    <Button variant=\"solid\" colorScheme=\"whatsapp\" onClick={() => {onSignOut()}}>Sign Out</Button>\r\n                </VStack>\r\n            </ModalBody>\r\n            </ModalContent>\r\n        </Modal>\r\n        </>\r\n    )\r\n\r\n    else return (\r\n        <>\r\n        <Button {...props} onClick={onOpen}>Sign In</Button>\r\n        <Modal motionPreset=\"slideInBottom\" closeOnOverlayClick={false} isOpen={isOpen} isCentered\r\n            onClose={() => {\r\n                setResponse(null)\r\n                onClose()\r\n            }}\r\n        >\r\n            <ModalOverlay/>\r\n            <ModalContent className=\"noselect\" width=\"20rem\" >\r\n            <ModalCloseButton/>\r\n            <ModalHeader align=\"center\" justify=\"center\" >Sign In</ModalHeader>\r\n            <ModalBody align=\"center\" justify=\"center\">\r\n            {response && response.error && <Alert \r\n                w=\"fit-content\"\r\n                mb=\"1rem\" \r\n                justify=\"center\" \r\n                align=\"center\"\r\n                borderRadius=\"0.5rem\"\r\n                padding=\"0.5rem 1rem\" \r\n                variant=\"solid\" \r\n                status=\"error\" \r\n            >\r\n                <AlertIcon/>\r\n                <AlertDescription>{response.error}</AlertDescription>\r\n            </Alert>}\r\n            <Formik \r\n                initialValues={initialValues} \r\n                validationSchema={validationSchema} \r\n                onSubmit={async (values, actions) => {\r\n                    await onSignIn(values)\r\n                    actions.setSubmitting(false)\r\n                }}    \r\n            >\r\n                {({ errors, touched, isSubmitting, isValid }) => (\r\n                <Form>\r\n                    <VStack justify=\"center\" align=\"center\" w=\"12.5rem\" >\r\n                        <CustomInputField name=\"email\" label=\"Email\" error={errors.email} touched={touched.email} />\r\n                        <CustomInputField type=\"password\" name=\"password\" label=\"Password\" error={errors.password} touched={touched.password} />\r\n                        <Spacer/>\r\n                        <Button\r\n                            isLoading={isSubmitting}\r\n                            isDisabled={!isValid} \r\n                            type=\"submit\"\r\n                            colorScheme=\"whatsapp\"\r\n                            size=\"md\"\r\n                            variant=\"solid\"\r\n                        >Sign In</Button>\r\n                    </VStack>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n            <ModalFooter/>\r\n            </ModalBody>\r\n            </ModalContent>\r\n        </Modal>\r\n        </>\r\n    )\r\n}\r\n","/**\r\n * Componente SignUp:\r\n * ------------------\r\n * Este componente gestiona el registro de nuevos usuarios:\r\n *  - Muestra un botón \"Register\" que abre un modal con un formulario Formik:\r\n *      • Campos: email, username, password, confirmPassword.\r\n *      • Validaciones con Yup:\r\n *          - email: formato válido y obligatorio.\r\n *          - username: obligatorio.\r\n *          - password: entre 6 y 20 caracteres.\r\n *          - confirmPassword: debe coincidir con password.\r\n *      • Al enviar, realiza POST a `/auth/signup` con los datos en JSON.\r\n *      • Muestra feedback en Alerts según la respuesta (`error` o `message`).\r\n *  - Usa `useDisclosure` para controlar el modal.\r\n */\r\nimport React, { useState } from 'react'\r\nimport { Formik, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport CustomInputField from '../utils/CustomInputField'\r\nimport {\r\n    Button,\r\n    Alert,\r\n    AlertIcon,\r\n    ModalFooter,\r\n    VStack,\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalHeader,\r\n    ModalContent,\r\n    ModalCloseButton,\r\n    ModalBody,\r\n    Spacer,\r\n    useDisclosure\r\n} from '@chakra-ui/react'\r\n\r\nconst url = process.env.REACT_APP_ENDPOINT\r\n\r\nconst initialValues = {\r\n    email: '',\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: ''\r\n}\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    email:  Yup.string()\r\n                .email('Invalid email')\r\n                .required('Required'),\r\n    username: Yup.string()\r\n                .required('Required'),\r\n    password: Yup.string()\r\n                .min(6,'Too short')\r\n                .max(20,'Too long')\r\n                .required('Required'),\r\n    confirmPassword: Yup.string()\r\n                        .oneOf([Yup.ref('password')], 'Must match password')\r\n                        .required('Required')\r\n})\r\n\r\nexport default function SignUp(props) {\r\n    const [response, setResponse] = useState()\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    \r\n    async function onSignUp(values) {\r\n        const body = {\r\n            email: values.email,\r\n            password: values.confirmPassword,\r\n            username: values.username,\r\n        }\r\n\r\n        var res = await fetch(`${url}/auth/signup`, {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(body)\r\n        })\r\n\r\n        res = await res.json()\r\n        setResponse(res)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <Button {...props} onClick={onOpen}>Register</Button>\r\n        <Modal motionPreset=\"slideInBottom\" closeOnOverlayClick={false} isOpen={isOpen} isCentered\r\n            onClose={() => {\r\n                setResponse(null)\r\n                onClose()\r\n            }}\r\n        >\r\n            <ModalOverlay/>\r\n            <ModalContent className=\"noselect\" width=\"20rem\" >\r\n            <ModalCloseButton/>\r\n            <ModalHeader align=\"center\" justify=\"center\" >Sign Up</ModalHeader>\r\n            <ModalBody align=\"center\" justify=\"center\">\r\n            {response && response.error && <Alert \r\n                w=\"fit-content\"\r\n                mb=\"1rem\" \r\n                justify=\"center\" \r\n                align=\"center\"\r\n                borderRadius=\"0.5rem\"\r\n                padding=\"0.5rem 1rem\" \r\n                variant=\"solid\" \r\n                status=\"error\" \r\n            >\r\n                <AlertIcon/>\r\n                {response.error}\r\n            </Alert>}\r\n            {response && response.message && <Alert \r\n                w=\"fit-content\"\r\n                mb=\"1rem\" \r\n                justify=\"center\" \r\n                align=\"center\"\r\n                borderRadius=\"0.5rem\"\r\n                padding=\"0.5rem 1rem\" \r\n                variant=\"solid\" \r\n                status=\"success\" \r\n            >\r\n                <AlertIcon/>\r\n                {response.message}\r\n            </Alert>}\r\n            <Formik \r\n                initialValues={initialValues} \r\n                validationSchema={validationSchema} \r\n                onSubmit={async (values, actions) => {\r\n                    await onSignUp(values)\r\n                    actions.setSubmitting(false)\r\n                }}    \r\n            >\r\n                {({ errors, touched, isSubmitting, isValid }) => (\r\n                <Form>\r\n                    <VStack justify=\"center\" align=\"center\" w=\"12.5rem\" >\r\n                        <CustomInputField name=\"email\" label=\"Email\" error={errors.email} touched={touched.email} />\r\n                        <CustomInputField name=\"username\" label=\"Username\" error={errors.username} touched={touched.username} />\r\n                        <CustomInputField type=\"password\" name=\"password\" label=\"Password\" error={errors.password} touched={touched.password} />\r\n                        <CustomInputField type=\"password\" name=\"confirmPassword\" label=\"Confirm Password\" error={errors.confirmPassword} touched={touched.confirmPassword} />\r\n                        <Spacer/>\r\n                        <Button\r\n                            isLoading={isSubmitting}\r\n                            isDisabled={!isValid} \r\n                            type=\"submit\"\r\n                            colorScheme=\"whatsapp\"\r\n                            size=\"md\"\r\n                            variant=\"solid\"\r\n                        >Sign Up</Button>\r\n                    </VStack>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n            <ModalFooter/>\r\n            </ModalBody>\r\n            </ModalContent>\r\n        </Modal>\r\n        </>\r\n    )\r\n}\r\n","/**\r\n * WaitingButton\r\n *\r\n * Componente que muestra un botón de “Matchmaking” y, al pulsarlo,\r\n * despliega un Popover indicando cuántos usuarios están en cola.\r\n *\r\n * Props:\r\n * @param {string} w           - Ancho del botón (p. ej. \"30%\").\r\n * @param {string} size        - Tamaño del botón (p. ej. \"lg\").\r\n * @param {Function} onClose   - Callback al cerrar el Popover.\r\n * @param {Function} onTrigger - Callback al abrir el Popover (iniciar espera).\r\n * @param {number} queueLength - Número de usuarios actualmente en la cola.\r\n *\r\n * Detalles:\r\n * - Utiliza Chakra UI para Popover, Spinner y tipografía.\r\n * - Muestra un Spinner y un mensaje “Waiting, X in Queue.”\r\n * - Si la cola está vacía, muestra un texto adicional informando\r\n *   de que el servidor puede tardar en “cold start” (hasta 1 min).\r\n */\r\nimport React from 'react';\r\nimport {\r\n  Popover,\r\n  Portal,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  PopoverArrow,\r\n  PopoverCloseButton,\r\n  PopoverBody,\r\n  Button,\r\n  Heading,\r\n  Text,\r\n  Spinner,\r\n  HStack,\r\n  VStack,\r\n} from '@chakra-ui/react';\r\n\r\nexport default function WaitingButton({\r\n  w,\r\n  size,\r\n  onClose,\r\n  onTrigger,\r\n  queueLength,\r\n}) {\r\n  return (\r\n    <Popover flip={true} returnFocusOnClose={true} onClose={onClose}>\r\n      <PopoverTrigger>\r\n        <Button w={w} size={size} onClick={onTrigger}>\r\n          Matchmaking\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <Portal>\r\n        <PopoverContent w=\"fit-content\" p=\"1rem 1.5rem\" className=\"noselect\">\r\n          <PopoverArrow />\r\n          <PopoverCloseButton />\r\n          <PopoverBody>\r\n            <VStack>\r\n              <HStack s=\"1rem\">\r\n                <Spinner />\r\n                <Heading size=\"md\">\r\n                  {`Waiting, ${queueLength} in Queue.`}\r\n                </Heading>\r\n              </HStack>\r\n              {queueLength === 0 && (\r\n                <Text size=\"sm\">\r\n                  Please be patient. The server can take up to 1 min to cold\r\n                  start.\r\n                </Text>\r\n              )}\r\n            </VStack>\r\n          </PopoverBody>\r\n        </PopoverContent>\r\n      </Portal>\r\n    </Popover>\r\n  );\r\n}\r\n","/**\r\n * Modal para ingresar un código de sala y unirse a la partida\r\n *\r\n * Este componente muestra un botón “Room Code” que, al pulsarlo, abre un modal\r\n * con un formulario gestionado por Formik y validado con Yup para introducir un\r\n * código de sala (exactamente 3 letras). Al enviar:\r\n * 1. Convierte el código a mayúsculas y lo guarda en el estado `roomCode`.\r\n * 2. Redirige automáticamente a la ruta `/play?roomCode=XXX`.\r\n *\r\n * Utiliza:\r\n * - Chakra UI (`Button`, `Modal`, `VStack`, etc.) para la interfaz y animaciones.\r\n * - Formik y Yup para la gestión y validación del formulario.\r\n * - React Router `Redirect` para navegar a la sala una vez que se ha capturado el código.\r\n * - CustomInputField para el campo de texto con manejo de errores.\r\n *\r\n * Props:\r\n * - Reenvía cualquier prop adicional al botón que abre el modal.\r\n *\r\n * Ejemplo de uso:\r\n * <GameCodeModal colorScheme=\"blue\" size=\"sm\" />\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport CustomInputField from '../utils/CustomInputField';\r\nimport { Redirect } from 'react-router';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  VStack,\r\n  useDisclosure,\r\n  Spacer\r\n} from '@chakra-ui/react';\r\n\r\n// Valores iniciales para Formik\r\nconst initialValues = { room: '' };\r\n\r\n// Esquema de validación: cadena de longitud exacta 3\r\nconst validationSchema = Yup.object().shape({\r\n  room: Yup.string()\r\n    .required('Required')\r\n    .length(3, 'Room should be 3 letters long')\r\n});\r\n\r\nexport default function GameCodeModal(props) {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [roomCode, setRoomCode] = useState(null);\r\n\r\n  // Si ya tenemos un código válido, redirige a /play con query param\r\n  if (roomCode) {\r\n    return <Redirect to={`/play?roomCode=${roomCode}`} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Botón que abre el modal; recibe props como colorScheme, size, etc. */}\r\n      <Button {...props} onClick={onOpen}>\r\n        Room Code\r\n      </Button>\r\n\r\n      {/* Modal de Chakra UI con formulario */}\r\n      <Modal\r\n        motionPreset=\"slideInBottom\"\r\n        closeOnOverlayClick={false}\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        isCentered\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent className=\"noselect\" width=\"20rem\" padding=\"1.5rem\">\r\n          <ModalCloseButton />\r\n          <ModalBody justify=\"center\" align=\"center\">\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={validationSchema}\r\n              onSubmit={async ({ room }, { setSubmitting }) => {\r\n                // Guarda el código en mayúsculas y detiene el spinner\r\n                await setRoomCode(room.toUpperCase());\r\n                setSubmitting(false);\r\n              }}\r\n            >\r\n              {({ errors, touched, isSubmitting, isValid }) => (\r\n                <Form className=\"auth-form\">\r\n                  <VStack justify=\"center\" align=\"center\" w=\"12.5rem\">\r\n                    {/* Campo de entrada personalizado con etiqueta y errores */}\r\n                    <CustomInputField\r\n                      name=\"room\"\r\n                      label=\"Room Code\"\r\n                      error={errors.room}\r\n                      touched={touched.room}\r\n                    />\r\n                    <Spacer />\r\n                    {/* Botón de envío; deshabilitado si el formulario no es válido */}\r\n                    <Button\r\n                      isLoading={isSubmitting}\r\n                      isDisabled={!isValid}\r\n                      type=\"submit\"\r\n                      colorScheme=\"whatsapp\"\r\n                      size=\"md\"\r\n                      variant=\"solid\"\r\n                    >\r\n                      Join Room\r\n                    </Button>\r\n                  </VStack>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","/**\r\n * Página de inicio con lógica de “sala de espera” mediante sockets\r\n *\r\n * - Conecta al servidor Socket.io en ENDPOINT.\r\n * - Gestiona el estado `waiting` con los socket IDs en cola.\r\n * - Emite `waiting` y `waitingDisconnection` al pulsar el botón de espera.\r\n * - Escucha `waitingRoomData` para actualizar la cola en tiempo real.\r\n * - Cuando `waiting.length >= 2`, solicita un `randomCode` al servidor,\r\n *   que asigna un código de sala a los dos primeros sockets.\r\n * - Al recibir `randomCode`, redirige al usuario correspondiente a `/play?roomCode=XXX`.\r\n * - No realiza llamadas REST ni interacciona con la base de datos; toda la\r\n *   coordinación es transitoria y en memoria vía sockets.\r\n */\r\n\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport randomCodeGenerator from '../../utils/randomCodeGenerator';\r\nimport './Homepage.css';\r\nimport io from 'socket.io-client';\r\nimport { UserContext } from '../../utils/UserContext';\r\nimport SignIn from '../../components/auth/SignIn';\r\nimport SignUp from '../../components/auth/SignUp';\r\nimport {\r\n  Heading,\r\n  VStack,\r\n  Spacer,\r\n  Flex\r\n} from '@chakra-ui/react';\r\nimport WaitingButton from './WaitingButton';\r\nimport GameCodeModal from './GameCodeModal';\r\n\r\nlet socket;\r\nconst ENDPOINT = process.env.REACT_APP_ENDPOINT;\r\n\r\nconst Homepage = () => {\r\n  const [waiting, setWaiting] = useState([]);\r\n  const [waitingToggle, setWaitingToggle] = useState(false);\r\n  const [code, setCode] = useState('');\r\n  const { user } = useContext(UserContext);\r\n\r\n  // Conexión y limpieza de socket\r\n  useEffect(() => {\r\n    const options = {\r\n      forceNew: true,\r\n      reconnectionAttempts: Infinity,\r\n      transports: ['websocket']\r\n    };\r\n    socket = io.connect(ENDPOINT, options);\r\n\r\n    return () => {\r\n      socket.emit('waitingDisconnection');\r\n      socket.off();\r\n    };\r\n  }, []);\r\n\r\n  // Suscripción a eventos de socket\r\n  useEffect(() => {\r\n    socket.on('waitingRoomData', ({ waiting }) => {\r\n      waiting && setWaiting(waiting);\r\n    });\r\n    socket.on('randomCode', ({ code }) => {\r\n      code && setCode(code);\r\n    });\r\n  }, []);\r\n\r\n  // Emitir eventos de unión o salida de la cola\r\n  useEffect(() => {\r\n    waitingToggle\r\n      ? socket.emit('waiting')\r\n      : socket.emit('waitingDisconnection');\r\n  }, [waitingToggle]);\r\n\r\n  // Emparejamiento cuando hay ≥2 usuarios en espera\r\n  if (waiting.length >= 2) {\r\n    const users = waiting.slice(0, 2);\r\n    socket.emit('randomCode', {\r\n      id1: users[0],\r\n      id2: users[1],\r\n      code: randomCodeGenerator(3)\r\n    });\r\n\r\n    // Si soy uno de los dos primeros y ya tengo código, redirijo\r\n    if ((users[0] === socket.id || users[1] === socket.id) && code) {\r\n      socket.emit('waitingDisconnection');\r\n      return <Redirect to={`/play?roomCode=${code}`} />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Homepage\">\r\n      {/* Cabecera */}\r\n      <header className=\"homepage-header\">\r\n        <h1>🎲 Poker Royale 🎲</h1>\r\n      </header>\r\n\r\n      <Flex\r\n        className=\"noselect\"\r\n        justify=\"center\"\r\n        align=\"center\"\r\n        flexDir=\"column\"\r\n      >\r\n        {!user ? (\r\n          <Heading m=\"1rem 0\" color=\"whitesmoke\" size=\"lg\">\r\n            TFG - DAW\r\n          </Heading>\r\n        ) : (\r\n          <Heading m=\"1rem 0\" color=\"whitesmoke\" size=\"lg\">\r\n            Welcome, {user.username}!\r\n          </Heading>\r\n        )}\r\n        <VStack w=\"lg\" s=\"1rem\" align=\"center\" justify=\"center\">\r\n          <Spacer />\r\n          <SignIn w=\"30%\" size=\"lg\" />\r\n          {!user && <SignUp w=\"30%\" size=\"lg\" />}\r\n          <GameCodeModal w=\"30%\" size=\"lg\" />\r\n          <WaitingButton\r\n            w=\"30%\"\r\n            size=\"lg\"\r\n            onTrigger={() => setWaitingToggle(true)}\r\n            onClose={() => setWaitingToggle(false)}\r\n            queueLength={waiting.length}\r\n          />\r\n        </VStack>\r\n      </Flex>\r\n\r\n      {/* Pie de página */}\r\n      <footer className=\"homepage-footer\">\r\n        <small>by Agustín Alvarez Fijo</small>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n","/**\r\n * Definición del mazo de cartas estándar para Poker Royal\r\n *\r\n * Este módulo exporta un array con los 52 objetos que representan cada carta\r\n * de un mazo francés:\r\n * - suit: palo de la carta ('hearts', 'diamonds', 'clubs', 'spades')\r\n * - value: valor de la carta (números del 2 al 10, y figuras 'J', 'Q', 'K', 'A')\r\n *\r\n * Se utiliza como base para generar la baraja inicial antes de aplicar\r\n * mezclas o repartir cartas en la partida.\r\n */\r\nexport default [\r\n  { \"suit\": \"hearts\",   \"value\": 2  },\r\n  { \"suit\": \"hearts\",   \"value\": 3  },\r\n  { \"suit\": \"hearts\",   \"value\": 4  },\r\n  { \"suit\": \"hearts\",   \"value\": 5  },\r\n  { \"suit\": \"hearts\",   \"value\": 6  },\r\n  { \"suit\": \"hearts\",   \"value\": 7  },\r\n  { \"suit\": \"hearts\",   \"value\": 8  },\r\n  { \"suit\": \"hearts\",   \"value\": 9  },\r\n  { \"suit\": \"hearts\",   \"value\": 10 },\r\n  { \"suit\": \"hearts\",   \"value\": \"J\" },\r\n  { \"suit\": \"hearts\",   \"value\": \"Q\" },\r\n  { \"suit\": \"hearts\",   \"value\": \"K\" },\r\n  { \"suit\": \"hearts\",   \"value\": \"A\" },\r\n\r\n  { \"suit\": \"diamonds\", \"value\": 2  },\r\n  { \"suit\": \"diamonds\", \"value\": 3  },\r\n  { \"suit\": \"diamonds\", \"value\": 4  },\r\n  { \"suit\": \"diamonds\", \"value\": 5  },\r\n  { \"suit\": \"diamonds\", \"value\": 6  },\r\n  { \"suit\": \"diamonds\", \"value\": 7  },\r\n  { \"suit\": \"diamonds\", \"value\": 8  },\r\n  { \"suit\": \"diamonds\", \"value\": 9  },\r\n  { \"suit\": \"diamonds\", \"value\": 10 },\r\n  { \"suit\": \"diamonds\", \"value\": \"J\" },\r\n  { \"suit\": \"diamonds\", \"value\": \"Q\" },\r\n  { \"suit\": \"diamonds\", \"value\": \"K\" },\r\n  { \"suit\": \"diamonds\", \"value\": \"A\" },\r\n\r\n  { \"suit\": \"clubs\",    \"value\": 2  },\r\n  { \"suit\": \"clubs\",    \"value\": 3  },\r\n  { \"suit\": \"clubs\",    \"value\": 4  },\r\n  { \"suit\": \"clubs\",    \"value\": 5  },\r\n  { \"suit\": \"clubs\",    \"value\": 6  },\r\n  { \"suit\": \"clubs\",    \"value\": 7  },\r\n  { \"suit\": \"clubs\",    \"value\": 8  },\r\n  { \"suit\": \"clubs\",    \"value\": 9  },\r\n  { \"suit\": \"clubs\",    \"value\": 10 },\r\n  { \"suit\": \"clubs\",    \"value\": \"J\" },\r\n  { \"suit\": \"clubs\",    \"value\": \"Q\" },\r\n  { \"suit\": \"clubs\",    \"value\": \"K\" },\r\n  { \"suit\": \"clubs\",    \"value\": \"A\" },\r\n\r\n  { \"suit\": \"spades\",   \"value\": 2  },\r\n  { \"suit\": \"spades\",   \"value\": 3  },\r\n  { \"suit\": \"spades\",   \"value\": 4  },\r\n  { \"suit\": \"spades\",   \"value\": 5  },\r\n  { \"suit\": \"spades\",   \"value\": 6  },\r\n  { \"suit\": \"spades\",   \"value\": 7  },\r\n  { \"suit\": \"spades\",   \"value\": 8  },\r\n  { \"suit\": \"spades\",   \"value\": 9  },\r\n  { \"suit\": \"spades\",   \"value\": 10 },\r\n  { \"suit\": \"spades\",   \"value\": \"J\" },\r\n  { \"suit\": \"spades\",   \"value\": \"Q\" },\r\n  { \"suit\": \"spades\",   \"value\": \"K\" },\r\n  { \"suit\": \"spades\",   \"value\": \"A\" }\r\n];\r\n","/**\r\n * Mezcla un array (por ejemplo, un mazo de cartas) intercambiando pares de elementos\r\n * de forma aleatoria durante un número fijo de iteraciones.\r\n *\r\n * Este método realiza 1000 intercambios aleatorios entre dos posiciones del array,\r\n * proporcionando una mezcla suficientemente desordenada para juegos sencillos.\r\n *\r\n * @param {Array} deck - Array de elementos a mezclar.\r\n * @returns {Array} El mismo array `deck`, ya reordenado.\r\n */\r\nexport default function shuffleArray(deck)\r\n{\r\n\t// for 1000 turns\r\n\t// switch the values of two random cards\r\n\tfor (var i = 0; i < 1000; i++)\r\n\t{\r\n\t\tvar location1 = Math.floor((Math.random() * deck.length));\r\n\t\tvar location2 = Math.floor((Math.random() * deck.length));\r\n\t\tvar tmp = deck[location1];\r\n\r\n\t\tdeck[location1] = deck[location2];\r\n\t\tdeck[location2] = tmp;\r\n\t}\r\n\r\n  return deck\r\n}","/**\r\n * Funciones de lógica de juego de poker\r\n *\r\n * - getHand(pDeck, hDeck):\r\n *    • Recibe las cartas del jugador (pDeck) y las comunitarias (hDeck).\r\n *    • Combina ambas manos, convierte figuras (J,Q,K,A) a valores numéricos.\r\n *    • Cuenta pares, tríos, cuartetos y palos para detectar manos (pares, dobles pares, tríos, escalera, color, full, poker, escalera de color, escalera real).\r\n *    • Considera excepciones \"Five High\" y \"Steel Wheel\" (A-2-3-4-5).\r\n *    • Devuelve un objeto `hand` con:\r\n *        – type: tipo de mano (“One Pair”, “Flush”, etc.).\r\n *        – primary, secondary, tertiary: valores de desempate según la mano.\r\n *\r\n * - getWinner(p1, p2, hand1, hand2):\r\n *    • Asigna un rango numérico a cada tipo de mano.\r\n *    • Compara rangos para determinar ganador.\r\n *    • Si empatan, compara primary, luego secondary y tertiary.\r\n *    • Devuelve el nombre del jugador ganador o \"Tie\" en caso de empate.\r\n *\r\n * - checkFlush(suitMatch): comprueba si hay 5 o más cartas del mismo palo.\r\n */\r\nexport function getHand(pDeck, hDeck) {\r\n    var valueMatch=[], suitMatch={}, twoMatches=[], threeMatches=[], fourMatches=[]\r\n    var hand={type: 'None'}\r\n\r\n    const playerDeck = pDeck.filter(item => { if (item) return item })\r\n    const houseDeck = hDeck.filter(item => { if (item) return item })\r\n    const combined = playerDeck && houseDeck && playerDeck.concat\r\n\r\n    /**Combinamos las cartas del jugador (playerDeck) con las comunitarias (houseDeck)\r\n     y convertimos J,Q,K,A en sus valores numéricos (11,12,13,14) para simplificar */\r\n    (houseDeck).map(item => {\r\n        if (!item) return \r\n        else if (item.value === 'J') return {suit: item.suit, value: 11}\r\n        else if (item.value === 'Q') return {suit: item.suit, value: 12}\r\n        else if (item.value === 'K') return {suit: item.suit, value: 13}\r\n        else if (item.value === 'A') return {suit: item.suit, value: 14}\r\n        else return {suit: item.suit, value: item.value}\r\n      })\r\n\r\n    if (!combined) return \"Error\"\r\n      \r\n    // Separamos valores y palos para evitar mapear varias veces\r\n    const values = combined.map(item=> {return item.value})\r\n    const descending = values.sort((a, b) => {return b-a})\r\n    const suits = combined.map(item=> {return item.suit})\r\n\r\n    // Contamos cuántas veces aparece cada valor y cada palo\r\n    values.forEach(x=> { valueMatch[x] = (valueMatch[x] || 0) + 1 })\r\n    suits.forEach(x=> { suitMatch[x] = (suitMatch[x] || 0) + 1 })\r\n\r\n    // Agrupamos en arrays las parejas, tríos y cuartetos encontrados\r\n    for(var i=1;i<14;i++) {\r\n        if (valueMatch[i] === 2) twoMatches.push(i)\r\n        else if (valueMatch[i] === 3) threeMatches.push(i)\r\n        else if (valueMatch[i] === 4) fourMatches.push(i) \r\n    }\r\n\r\n    // Recorremos cada carta para detectar escalera, color y sus variantes\r\n    combined.forEach(({ suit, value }) => {\r\n        const Straight = (values.includes(value+1)&&values.includes(value+2)&&values.includes(value+3)&&values.includes(value+4)) ? true : false\r\n\r\n        // Escalera de color\r\n        const StraightFlush = (combined.some(e => {return ((e.value === value+1)&&(e.suit === suit))})) &&\r\n        (combined.some(e => {return ((e.value === value+2)&&(e.suit === suit))})) &&\r\n        (combined.some(e => {return ((e.value === value+3)&&(e.suit === suit))})) && \r\n        (combined.some(e => {return ((e.value === value+4)&&(e.suit === suit))}))\r\n\r\n        // Casos especiales 'A,2,3,4,5', estos son los únicos casos en los que el \"A\" actua como    carta baja\r\n        const FiveHigh = (values.includes(14)&&values.includes(2)&&values.includes(3)&&values.includes(4)&&values.includes(5)) ? true : false\r\n\r\n        const SteelWheel = (combined.some(e => {return ((e.value === 14)&&(e.suit === suit))})) &&\r\n        (combined.some(e => {return ((e.value === 2)&&(e.suit === suit))})) &&\r\n        (combined.some(e => {return ((e.value === 3)&&(e.suit === suit))})) && \r\n        (combined.some(e => {return ((e.value === 4)&&(e.suit === suit))})) && \r\n        (combined.some(e => {return ((e.value === 4)&&(e.suit === suit))}))\r\n\r\n        // Ahora asignamos el tipo de mano según lo detectado:\r\n        if ((value===10)&&(StraightFlush)) {\r\n            hand.type = 'Royal Flush'\r\n            /*Aunque en las reglas de alguna modalidad de poker dicen que un Royal Flush de un palo puede vencer a otro(♠︎ > ♥︎ > ♦︎ > ♣︎), en el póker competitivo se establece que dos Royal Flush siempre empatarán. Además, dado que la probabilidad de que aparezcan dos Royal Flush en la misma partida es de 1 en 649,739, asique no me voy a complicar implementándolo :)*/\r\n        } \r\n        else if (StraightFlush) {\r\n            hand.type = 'Straight Flush'\r\n            hand.primary = value+4\r\n        } \r\n        else if (Straight) {\r\n            hand.type = 'Straight'\r\n            hand.primary = value+4\r\n        } \r\n        else if (([14,2,3,4,5].includes(value)) && (SteelWheel)) {\r\n            hand.type = 'Straight Flush'\r\n            hand.primary = 5\r\n        } \r\n        else if (([14,2,3,4,5].includes(value)) && (FiveHigh)) {\r\n            hand.type = 'Straight'\r\n            hand.primary = 5\r\n        } \r\n    })\r\n\r\n    // Ahora cubrimos parejas, dobles parejas, trío, color, full y póker:\r\n\r\n    // Pareja simple\r\n    if ((hand.type==='None')&&(twoMatches.length===1)&&(threeMatches.length===0)) {\r\n        hand.type = 'One Pair'\r\n        hand.primary = twoMatches[0]\r\n\r\n        const descendingFiltered = descending.filter(e => {return e!==hand.primary})\r\n        hand.secondary = descendingFiltered[0]\r\n        hand.tertiary = descendingFiltered[1]\r\n    }\r\n    // Dos parejas\r\n    else if (twoMatches.length===2) {\r\n        hand.type = 'Two Pair'\r\n        hand.primary = twoMatches[1]\r\n        hand.secondary = twoMatches[0]\r\n\r\n        hand.tertiary = descending.filter(e => {return (e!==hand.primary && e!==hand.secondary )})[0]\r\n    } \r\n    // Más de dos parejas (caso raro)\r\n    else if (twoMatches.length>2) {\r\n        hand.type = 'Two Pair'\r\n        hand.primary = twoMatches[twoMatches.length]\r\n        hand.secondary = twoMatches[twoMatches.length - 1]\r\n\r\n        hand.tertiary = descending.filter(e => {return (e!==hand.primary && e!==hand.secondary )})[0]\r\n    }\r\n    // Trío\r\n    else if ((twoMatches.length===0)&&(threeMatches.length===1)) {\r\n        hand.type = 'Three of a kind'\r\n        hand.primary = threeMatches[0]\r\n\r\n        hand.secondary = descending.filter(e => {return e!==hand.primary})[0]\r\n    }\r\n    // Color\r\n    else if ((Object.keys(suitMatch).length<4) && checkFlush(suitMatch)) {\r\n        hand.type = 'Flush'\r\n        hand.primary = descending[0]\r\n    }\r\n    // Full House\r\n    else if ((twoMatches.length===1)&&(threeMatches.length===1)) {\r\n        hand.type = 'Full House'\r\n        hand.primary = threeMatches[0]\r\n        hand.secondary = twoMatches[0]\r\n    } \r\n    // Poker\r\n    else if (fourMatches.length===1) {\r\n        hand.type = 'Four of a kind'\r\n        hand.primary = fourMatches[0]\r\n        hand.secondary = descending.filter(e => {return e!==hand.primary})[0]\r\n    }\r\n\r\n    /**Para los casos en los que no hay ni parejas ni nada, ordeno los valores de la mano en un array de menera desdente y eliggo el primer elemento para ver quien gana por carta alta.\r\n    Para los casos de Escalera real, escalera y color hacemos lo mismo que en caso de empate.*/\r\n    else if ((hand.type = 'None') || (['Royal Flush','Straight Flush','Straight'].includes(hand.type))) {\r\n        hand.primary = descending[0]\r\n        hand.secondary = descending[1]\r\n    }\r\n\r\n    return hand\r\n}\r\n\r\n// Función para comparar dos manos y devolver el ganador\r\nexport function getWinner(p1, p2, hand1, hand2) {\r\n    const rank1 = getRank(hand1.type), rank2 = getRank(hand2.type) \r\n\r\n    // Asignamos un número a cada tipo de mano\r\n    function getRank(handType) {\r\n        var rank\r\n\r\n        switch (handType) {\r\n            case 'None': rank=0; break;\r\n            case 'One Pair': rank=1; break;\r\n            case 'Two Pair': rank=2; break;\r\n            case 'Three of a kind': rank=3; break;\r\n            case 'Straight': rank=4; break;\r\n            case 'Flush': rank=5; break;\r\n            case 'Full House': rank=6; break;\r\n            case 'Four of a kind': rank=7; break;\r\n            case 'Straight Flush': rank=8; break;\r\n            case 'Royal Flush': rank=8;\r\n          }\r\n\r\n          return rank\r\n    }\r\n\r\n    // Comparamos rangos primero, luego primary, luego secondary y tertiary\r\n    if (rank1 > rank2) return p1\r\n    else if (rank1 < rank2) return p2\r\n\r\n    else if (rank1 === rank2) {\r\n        // Para Royal Flush siempre empate\r\n        if (rank1!=='Royal Flush') {\r\n\r\n            // Comparamos valores altos\r\n            if (hand1.primary > hand2.primary) return p1\r\n            else if (hand1.primary < hand2.primary) return p2\r\n\r\n            // Si primary empata, revisamos secondary/tertiary\r\n            else if (hand1.primary === hand2.primary) {\r\n\r\n                if (hand1.secondary) { // Compruebo que exista secondary\r\n\r\n                    if (hand1.secondary > hand2.secondary) return p1\r\n                    else if (hand1.secondary < hand2.secondary) return p2\r\n\r\n                    else if (hand1.secondary === hand2.secondary) {\r\n\r\n                        if (hand1.tertiary) { // Comprueba si tertiary existe\r\n\r\n                            if (hand1.tertiary > hand2.tertiary) return p1\r\n                            else if (hand1.tertiary < hand2.tertiary) return p2\r\n                            \r\n                            else if (hand1.tertiary === hand2.tertiary) return 'Tie'\r\n                        }\r\n\r\n                        else return 'Tie'\r\n                    }\r\n\r\n                }\r\n                \r\n                else return 'Tie'\r\n            }\r\n        }\r\n\r\n        else if (rank1==='Royal Flush') {\r\n            return 'Tie'\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n// Comprueba si hay color\r\nfunction checkFlush(suitMatch) {\r\n    if (suitMatch.diamonds && suitMatch.diamonds >= 5) return true\r\n    else if (suitMatch.clubs && suitMatch.clubs >= 5) return true\r\n    else if (suitMatch.spades && suitMatch.spades >= 5) return true\r\n    else if (suitMatch.hearts && suitMatch.hearts >= 5) return true\r\n\r\n    else return false\r\n}","/**\r\n * Componente Card\r\n *\r\n * Este componente renderiza la imagen de una carta de poker según su palo y valor.\r\n * - Para cartas normales (hearts, diamonds, clubs, spades):\r\n *   • Usa require dinámico para cargar el SVG correspondiente desde assets/cards/{SUIT}/{SUIT}_{VALUE}.svg\r\n * - Para la carta de reverso (BACK):\r\n *   • Carga el SVG desde assets/cards/BACK.svg\r\n *\r\n * Props:\r\n * @param {string} value     - Valor de la carta ('2'–'10', 'J', 'Q', 'K', 'A').\r\n * @param {string} suit      - Palo de la carta ('hearts', 'diamonds', 'clubs', 'spades', o 'BACK').\r\n * @param {string} className - Clases CSS adicionales para estilizar la imagen.\r\n *\r\n * Ejemplo de uso:\r\n * <Card suit=\"hearts\" value=\"A\" className=\"card-large\" />\r\n */\r\nimport React from 'react'\r\n\r\nfunction Card({ value, suit, className }) {\r\n    return (\r\n        <>\r\n            {suit!=='BACK'&&<img className={className} alt={suit+\"-\"+value} src={require(`../../assets/cards/${suit.toUpperCase()}/${suit.toUpperCase()}_${value}.svg`).default}/>}\r\n            {suit==='BACK'&&<img className={className} alt={suit+\"-\"+value} src={require(`../../assets/cards/${suit}.svg`).default}/>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Card","/**\r\n * Componente Spinner\r\n *\r\n * Muestra una animación de puntos suspensivos (ellipsis) para indicar\r\n * una acción en curso o carga de datos.\r\n *\r\n * - Utiliza una estructura de divs anidados con la clase `lds-ellipsis`.\r\n * - Los estilos de animación se definen en \"Spinner.css\".\r\n *\r\n * Ejemplo de uso:\r\n * <Spinner />\r\n */\r\n\r\nimport React from 'react';\r\nimport \"./Spinner.css\";\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className=\"lds-ellipsis\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;\r\n","/**\r\n * Componente Cards\r\n *\r\n * Renderiza la disposición de cartas y fichas de ambos jugadores y las comunitarias.\r\n * No interactúa con la base de datos: recibe todo como props.\r\n *\r\n * Props:\r\n * @param {number} numberOfTurns   - Contador de rondas (0→1 preflop, 2→3 flop, 4→5 turn, 6→7 river, ≥8 game over).\r\n * @param {Array}  houseDeck       - Cartas comunitarias (se muestran boca abajo si numberOfTurns < 2).\r\n * @param {Array}  player1Deck     - Cartas privadas de Player 1.\r\n * @param {Array}  player2Deck     - Cartas privadas de Player 2.\r\n * @param {number} player1Chips    - Fichas restantes de Player 1.\r\n * @param {number} player2Chips    - Fichas restantes de Player 2.\r\n * @param {string} turn            - \"Player 1\" o \"Player 2\", indicando de quién es el turno.\r\n * @param {string} currentUser     - Tu rol en la partida (\"Player 1\" o \"Player 2\").\r\n * @param {string} winner          - Nombre del ganador, o falsy si aún no hay.\r\n * @param {string} player1Name     - Nombre de Player 1.\r\n * @param {string} player2Name     - Nombre de Player 2.\r\n * @param {boolean} gameOver       - TRUE si la mano ha terminado.\r\n *\r\n * Comportamiento:\r\n * - Muestra un encabezado con el nombre de cada jugador, marcando al ganador con 👑 y \"(You)\" si eres tú.\r\n * - En cada mano, solo el jugador correspondiente o todos (al finalizar) ven sus cartas propias boca arriba.\r\n * - Las cartas de la mesa aparecen según la ronda (BACK o su palo real).\r\n * - Muestra Spinner cuando no es tu turno y la acción del oponente está pendiente.\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport Card from './Card';\r\nimport Spinner from '../utils/Spinner';\r\nimport { HStack, VStack, Flex, Heading } from '@chakra-ui/react';\r\n\r\nexport default function Cards({\r\n  numberOfTurns,\r\n  player1Deck,\r\n  player2Deck,\r\n  houseDeck,\r\n  gameOver,\r\n  currentUser,\r\n  player1Chips,\r\n  player2Chips,\r\n  turn,\r\n  winner,\r\n  player1Name,\r\n  player2Name\r\n}) {\r\n  const [p1Heading, setP1Heading] = useState();\r\n  const [p2Heading, setP2Heading] = useState();\r\n  const [houseHeading, setHouseHeading] = useState();\r\n\r\n  // Título de la sección de mesa según la ronda\r\n  useEffect(() => {\r\n    if (numberOfTurns < 2) setHouseHeading('Buy In to reveal cards');\r\n    else if (numberOfTurns < 4) setHouseHeading('Flop');\r\n    else if (numberOfTurns < 6) setHouseHeading('Turn');\r\n    else if (numberOfTurns < 8) setHouseHeading('River');\r\n    else setHouseHeading('Game Over!');\r\n  }, [numberOfTurns]);\r\n\r\n  // Construir encabezados de jugador con marca de ganador y \"(You)\"\r\n  useEffect(() => {\r\n    // Player 1\r\n    if (currentUser === 'Player 1' && winner === player1Name) setP1Heading(`👑 ${player1Name} (You)`);\r\n    else if (currentUser === 'Player 1') setP1Heading(`${player1Name} (You)`);\r\n    else if (winner === player1Name) setP1Heading(`👑 ${player1Name}`);\r\n    else setP1Heading(player1Name);\r\n\r\n    // Player 2\r\n    if (currentUser === 'Player 2' && winner === player2Name) setP2Heading(`👑 ${player2Name} (You)`);\r\n    else if (currentUser === 'Player 2') setP2Heading(`${player2Name} (You)`);\r\n    else if (winner === player2Name) setP2Heading(`👑 ${player2Name}`);\r\n    else setP2Heading(player2Name);\r\n  }, [winner, player1Name, player2Name, currentUser]);\r\n\r\n  return (\r\n    <Flex justify=\"center\" align=\"center\" flexDir=\"column\">\r\n      {/* Player 2 */}\r\n      <Heading my=\"0.5rem\" fontFamily=\"inherit\" size=\"md\"\r\n        style={{ color: winner === player2Name ? \"#FFD700\" : \"inherit\" }}>\r\n        {p2Heading}\r\n      </Heading>\r\n      <HStack spacing=\"1.5rem\">\r\n        <HStack>\r\n          {player2Deck.map(item =>\r\n            ((currentUser === 'Player 2' || gameOver) && item) ? (\r\n              <Card className=\"player-card\" value={item.value} suit={item.suit} />\r\n            ) : (\r\n              <Card className=\"player-card-back\" suit=\"BACK\" />\r\n            )\r\n          )}\r\n        </HStack>\r\n        <VStack>\r\n          <Heading size=\"md\" fontWeight=\"semibold\" fontFamily=\"inherit\">\r\n            Chips: {player2Chips}\r\n          </Heading>\r\n          {currentUser === 'Player 1' && turn === 'Player 2' && !gameOver && <Spinner />}\r\n        </VStack>\r\n      </HStack>\r\n\r\n      {/* Mesa */}\r\n      <Heading my=\"0.5rem\" fontFamily=\"inherit\" size=\"md\">\r\n        {houseHeading}\r\n      </Heading>\r\n      <Flex justify=\"center\" align=\"center\" flexDir=\"row\" gridGap=\"1rem\" flexWrap=\"wrap\">\r\n        {houseDeck.map(item =>\r\n          <Card\r\n            value={item.value}\r\n            suit={numberOfTurns >= 2 ? item.suit : 'BACK'}\r\n            className=\"card\"\r\n          />\r\n        )}\r\n      </Flex>\r\n\r\n      {/* Player 1 */}\r\n      <Heading my=\"0.5rem\" fontFamily=\"inherit\" size=\"md\"\r\n        style={{ color: winner === player1Name ? \"#FFD700\" : \"inherit\" }}>\r\n        {p1Heading}\r\n      </Heading>\r\n      <HStack spacing=\"1.5rem\">\r\n        <VStack>\r\n          <Heading size=\"md\" fontWeight=\"semibold\" fontFamily=\"inherit\">\r\n            Chips: {player1Chips}\r\n          </Heading>\r\n          {currentUser === 'Player 2' && turn === 'Player 1' && !gameOver && <Spinner />}\r\n        </VStack>\r\n        <HStack>\r\n          {player1Deck.map(item =>\r\n            ((currentUser === 'Player 1' || gameOver) && item) ? (\r\n              <Card className=\"player-card\" value={item.value} suit={item.suit} />\r\n            ) : (\r\n              <Card className=\"player-card-back\" suit=\"BACK\" />\r\n            )\r\n          )}\r\n        </HStack>\r\n      </HStack>\r\n    </Flex>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/shuffling-cards-1.30ba20ce.mp3\";","export default __webpack_public_path__ + \"static/media/check-sound.d733519c.mp3\";","export default __webpack_public_path__ + \"static/media/chips-sound.612d2701.mp3\";","export default __webpack_public_path__ + \"static/media/card-flip.5000e679.mp3\";","/**\r\n * Componente RaiseModal:\r\n * ----------------------\r\n * Este componente renderiza un botón \"Raise\" que abre un modal usando Chakra UI.\r\n * Dentro del modal se muestra un formulario construido con Formik y validado con Yup:\r\n *  - initialValues.raise: valor inicial redondeado a la décima más cercana basado en props.minRaise.\r\n *  - validationSchema: \r\n *      • Debe ser un número y estar presente.\r\n *      • Máximo menor que props.maxRaise (muestra chips restantes).\r\n *      • Mínimo mayor que props.minRaise.\r\n * Al enviar el formulario:\r\n *  1. Se llama a props.raiseHandler con el valor introducido.\r\n *  2. Se desactiva el estado de \"submitting\".\r\n *  3. Se cierra el modal.\r\n *\r\n * Uso de hooks:\r\n *  - useDisclosure: controla apertura y cierre del Modal.\r\n *\r\n * Props esperadas:\r\n *  - minRaise (número): cantidad mínima permitida para subir.\r\n *  - maxRaise (número): cantidad máxima permitida (chips restantes).\r\n *  - raiseHandler (función): función asíncrona que procesa la subida.\r\n *  - isDisabled (booleano): deshabilita el botón de envío.\r\n *  - Cualquier otra prop que se pase al botón principal.\r\n */\r\n\r\nimport React from 'react'\r\nimport { Formik, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport CustomInputField from '../utils/CustomInputField'\r\nimport {\r\n    Button,\r\n    HStack,\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalHeader,\r\n    ModalContent,\r\n    ModalCloseButton,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Spacer,\r\n    useDisclosure\r\n} from '@chakra-ui/react'\r\n\r\nexport default function RaiseModal(props) {\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const initialValues = {\r\n        raise: Math.round(10 * (props.minRaise + 10))/10, // rounding to the next tenth\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        raise: Yup\r\n                .number()\r\n                .typeError('Invalid Amount')\r\n                .required('Required')\r\n                .lessThan(props.maxRaise, `Not enough chips, remaining: ${props.maxRaise}`)\r\n                .min(props.minRaise + 1, `Has to be more than ${props.minRaise}`)\r\n    })\r\n\r\n    return (\r\n        <>\r\n        <Button \r\n            {...props} \r\n            onClick={onOpen}\r\n            variant=\"solid\"\r\n            border=\"2px solid black\"\r\n            size=\"md\"\r\n            w=\"10rem\"\r\n        >Raise</Button>\r\n        <Modal motionPreset=\"slideInBottom\" isOpen={isOpen} isCentered\r\n            onClose={() => {\r\n                onClose()\r\n            }}\r\n        >\r\n            <ModalOverlay/>\r\n            <ModalContent fontFamily=\"Ubuntu Mono\" className=\"noselect\" width=\"20rem\" >\r\n            <ModalCloseButton/>\r\n            <ModalHeader align=\"center\" justify=\"center\" >Raise</ModalHeader>\r\n            <ModalBody align=\"center\" justify=\"center\">\r\n                <Formik \r\n                initialValues={initialValues} \r\n                validationSchema={validationSchema} \r\n                onSubmit={async (values, actions) => {\r\n                    await props.raiseHandler(values.raise)\r\n                    actions.setSubmitting(false)\r\n                    onClose()\r\n                }}    \r\n            >\r\n                {({ errors, touched, isSubmitting, isValid }) => (\r\n                <Form>\r\n                    <HStack h=\"fit-content\" align=\"flex-start\">\r\n                        <CustomInputField name=\"raise\" error={errors.raise} touched={touched.raise}/>\r\n                        <Spacer/>\r\n                        <Button\r\n                            isLoading={isSubmitting}\r\n                            isDisabled={!isValid || props.isDisabled} \r\n                            type=\"submit\"\r\n                            colorScheme=\"facebook\"\r\n                            size=\"lg\"\r\n                            variant=\"solid\"\r\n                        >Raise</Button>\r\n                    </HStack>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n            <ModalFooter/>\r\n            </ModalBody>\r\n            </ModalContent>\r\n        </Modal>\r\n        </>\r\n    )\r\n}\r\n","/**\r\n * Componente Game:\r\n * ---------------\r\n *\r\n * Este componente gestiona la lógica de una partida de poker en tiempo real\r\n * mediante Socket.IO. Su flujo principal es:\r\n *\r\n * 1. Inicialización de la conexión:\r\n *    - Se conecta al servidor en ENDPOINT.\r\n *    - Emite evento 'join' para unirse a la sala (roomCode extraído de la URL).\r\n *    - Maneja errores de sala llena.\r\n *\r\n * 2. Estado del juego:\r\n *    - Variables de estado para controlar usuarios, turnos, barajas, fichas, bote, apuestas, manos, sonido y ganador.\r\n *    - Al montar:\r\n *      • Baraja un mazo completo (DECK_OF_CARDS) y reparte cartas a player1, player2 y la mesa (house).\r\n *      • Envía el estado inicial al servidor con 'initGameState'.\r\n *\r\n * 3. Recepción de eventos:\r\n *    - 'initGameState' y 'updateGameState': actualizan localmente todas las variables según los datos recibidos.\r\n *    - 'roomData': lista de usuarios en sala.\r\n *    - 'currentUserData': identifica si eres Player 1 o Player 2.\r\n *\r\n * 4. Lógica de turnos y rondas:\r\n *    - Tras cada cambio de número de turnos:\r\n *      • Envía actualizaciones (reparto de flop/turn/river, incrementos, chequeos, fin de partida).\r\n *      • Reproduce efectos de sonido según la acción (barajar, subir, fichas, mostrar carta).\r\n *      • Calcula la mano local (getHand) para mostrarla al usuario activo.\r\n *\r\n * 5. Handlers de acciones del jugador:\r\n *    - callHandler(): envía evento para “Call” o “Check” según increment.\r\n *    - raiseHandler(amount): envía evento para “Raise” ajustando increment, fichas y bote.\r\n *    - foldHandler(): envía evento para abandonar la mano y declara ganador al contrario.\r\n *\r\n * 6. Reinicio de partida:\r\n *    - Si se solicita restart, vuelve a barajar, reparte y emite 'initGameState' según ganador o empate.\r\n *\r\n * 7. Renderizado:\r\n *    - Si hay menos de 2 usuarios: muestra “Waiting…”.\r\n *    - En la UI: código de sala, componente <Cards> para visualizar cartas, estado del bote y botones de acción (Call/Raise/Fold/Restart).\r\n *\r\n * Utiliza Hooks de React (useState, useEffect, useContext), utilidades de juego y sonidos con use-sound.\r\n */\r\nimport React, { useState, useEffect, useContext } from 'react'\r\nimport DECK_OF_CARDS from '../../utils/deck'\r\nimport shuffleArray from '../../utils/shuffleArray'\r\nimport { getHand, getWinner } from '../../utils/gameFunctions'\r\nimport io from 'socket.io-client'\r\nimport queryString from 'query-string'\r\nimport Cards from './Cards'\r\nimport useSound from 'use-sound'\r\n\r\nimport shufflingSound from '../../assets/sounds/shuffling-cards-1.mp3'\r\nimport checkSound from '../../assets/sounds/check-sound.mp3'\r\nimport chipsSound from '../../assets/sounds/chips-sound.mp3'\r\nimport cardFlipSound from '../../assets/sounds/card-flip.mp3'\r\n\r\nimport { UserContext } from '../../utils/UserContext'\r\nimport RaiseModal from './RaiseModal'\r\nimport { Button, HStack, Flex, Heading, Box } from '@chakra-ui/react'\r\n\r\nlet socket\r\nconst ENDPOINT = process.env.REACT_APP_ENDPOINT\r\n\r\nfunction Game(props) {\r\n\tconst data = queryString.parse(props.location.search)\r\n\r\n\t// Inicializo el estado de socket \r\n\tconst [room, setRoom] = useState(data.roomCode)\r\n\tconst [roomFull, setRoomFull] = useState(false)\r\n\tconst [users, setUsers] = useState([])\r\n\tconst [currentUser, setCurrentUser] = useState('')\r\n\r\n\tconst { user } = useContext(UserContext)\r\n\r\n\tuseEffect(() => {\r\n\t\tconst connectionOptions = {\r\n\t\t\tforceNew: true,\r\n\t\t\treconnectionAttempts: 'Infinity',\r\n\t\t\ttransports: ['websocket'],\r\n\t\t}\r\n\t\tsocket = io.connect(ENDPOINT, connectionOptions)\r\n\r\n\t\tsocket.emit('join', { room: room }, (error) => {\r\n\t\t\tif (error) setRoomFull(true)\r\n\t\t})\r\n\r\n\t\t//Limpio el componente de desconexión\r\n\t\treturn () => {\r\n\t\t\tsocket.emit('disconnection')\r\n\t\t\t//Apago la instancia de conexión\r\n\t\t\tsocket.off()\r\n\t\t}\r\n\t}, [])\r\n\r\n\t//Inicializo el estado de Game\r\n\tconst [gameOver, setGameOver] = useState()\r\n\tconst [winner, setWinner] = useState('')\r\n\tconst [turn, setTurn] = useState('')\r\n\tconst [numberOfTurns, setNumberOfTurns] = useState('')\r\n\tconst [player1Deck, setPlayer1Deck] = useState([])\r\n\tconst [player2Deck, setPlayer2Deck] = useState([])\r\n\tconst [houseDeck, setHouseDeck] = useState([])\r\n\tconst [player1Chips, setPlayer1Chips] = useState('')\r\n\tconst [player2Chips, setPlayer2Chips] = useState('')\r\n\tconst [increment, setIncrement] = useState('')\r\n\tconst [pot, setPot] = useState('')\r\n\tconst [raiseAmount, setRaiseAmount] = useState('')\r\n\tconst [player1Name, setPlayer1Name] = useState()\r\n\tconst [player2Name, setPlayer2Name] = useState()\r\n\r\n\tconst [playShufflingSound] = useSound(shufflingSound)\r\n\tconst [playChipsSound] = useSound(chipsSound)\r\n\tconst [playCardFlipSound] = useSound(cardFlipSound)\r\n\tconst [playCheckSound] = useSound(checkSound)\r\n\r\n\tconst [localHand, setLocalHand] = useState('N/A')\r\n\r\n    // Inicio de partida: baraja y reparte cartas, emite estado inicial\r\n\tuseEffect(() => {\r\n\t\t//Barajo DECK_OF_CARDS\r\n\t\tconst shuffledCards = shuffleArray(DECK_OF_CARDS)\r\n\t\t//Saco 2 cartas para player1Deck\r\n\t\tconst player1Deck = shuffledCards.splice(0, 2)\r\n\t\t//Saco 2 cartas para player2Deck\r\n\t\tconst player2Deck = shuffledCards.splice(0, 2)\r\n\t\t//Saco 2 cartas para houseDeck\r\n\t\tconst houseDeck = shuffledCards.splice(0, 3)\r\n\r\n\t\t//Mando el estado inicial al servidor\r\n\t\tsocket.emit('initGameState', {\r\n\t\t\tgameOver: false,\r\n\t\t\tturn: 'Player 1',\r\n\t\t\tplayer1Deck: [...player1Deck],\r\n\t\t\tplayer2Deck: [...player2Deck],\r\n\t\t\thouseDeck: [...houseDeck],\r\n\t\t\tplayer1Chips: 500,\r\n\t\t\tplayer2Chips: 500,\r\n\t\t\tincrement: 10,\r\n\t\t\tnumberOfTurns: 0,\r\n\t\t\tpot: 0,\r\n\t\t\traiseAmount: 0,\r\n\t\t\tplayer1Name: 'Player 1',\r\n\t\t\tplayer2Name: 'Player 2',\r\n\t\t})\r\n\r\n\t\tsetShuffledDeck(shuffledCards.splice(0, 2))\r\n\t}, [])\r\n\r\n\t// Manejo de eventos entrantes para sincronizar estado\r\n\tuseEffect(() => {\r\n\t\tsocket.on('initGameState',\r\n\t\t\t({gameOver,winner,turn,player1Deck,player2Deck,houseDeck,increment,player1Chips,player2Chips,numberOfTurns,pot,raiseAmount,player1Name,player2Name,\r\n\t\t\t}) => {\r\n\t\t\t\tsetGameOver(gameOver)\r\n\t\t\t\tsetTurn(turn)\r\n\t\t\t\tsetPlayer1Deck(player1Deck)\r\n\t\t\t\tsetPlayer2Deck(player2Deck)\r\n\t\t\t\tsetHouseDeck(houseDeck)\r\n\t\t\t\tsetIncrement(increment)\r\n\t\t\t\tsetPlayer1Chips(player1Chips)\r\n\t\t\t\tsetPlayer2Chips(player2Chips)\r\n\t\t\t\tsetNumberOfTurns(numberOfTurns)\r\n\t\t\t\tsetPot(pot)\r\n\t\t\t\tsetRaiseAmount(raiseAmount)\r\n\t\t\t\tsetPlayer1Name(player1Name)\r\n\t\t\t\tsetPlayer2Name(player2Name)\r\n\t\t\t\tsetWinner(winner)\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t\tsocket.on('updateGameState',\r\n\t\t\t({\r\n\t\t\t\tgameOver,\r\n\t\t\t\twinner,\r\n\t\t\t\tturn,\r\n\t\t\t\tplayer1Deck,\r\n\t\t\t\tplayer2Deck,\r\n\t\t\t\thouseDeck,\r\n\t\t\t\tincrement,\r\n\t\t\t\tplayer1Chips,\r\n\t\t\t\tplayer2Chips,\r\n\t\t\t\tnumberOfTurns,\r\n\t\t\t\tpot,\r\n\t\t\t\traiseAmount,\r\n\t\t\t\tplayer1Name,\r\n\t\t\t\tplayer2Name,\r\n\t\t\t}) => {\r\n\t\t\t\tgameOver && setGameOver(gameOver)\r\n\t\t\t\twinner && setWinner(winner)\r\n\t\t\t\tturn && setTurn(turn)\r\n\t\t\t\tplayer1Deck && setPlayer1Deck(player1Deck)\r\n\t\t\t\tplayer2Deck && setPlayer2Deck(player2Deck)\r\n\t\t\t\thouseDeck && setHouseDeck(houseDeck)\r\n\t\t\t\tincrement !== undefined && increment !== null && setIncrement(increment)\r\n\t\t\t\tplayer1Chips !== undefined &&\r\n\t\t\t\t\tplayer1Chips !== null &&\r\n\t\t\t\t\tsetPlayer1Chips(player1Chips)\r\n\t\t\t\tplayer2Chips !== undefined &&\r\n\t\t\t\t\tplayer2Chips !== null &&\r\n\t\t\t\t\tsetPlayer2Chips(player2Chips)\r\n\t\t\t\tnumberOfTurns && setNumberOfTurns(numberOfTurns)\r\n\t\t\t\tpot && setPot(pot)\r\n\t\t\t\traiseAmount !== undefined &&\r\n\t\t\t\t\traiseAmount !== null &&\r\n\t\t\t\t\tsetRaiseAmount(raiseAmount)\r\n\t\t\t\tplayer1Name && setPlayer1Name(player1Name)\r\n\t\t\t\tplayer2Name && setPlayer2Name(player2Name)\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t\tsocket.on('roomData', ({ users }) => {\r\n\t\t\tsetUsers(users)\r\n\t\t})\r\n\r\n\t\tsocket.on('currentUserData', ({ name }) => {\r\n\t\t\tsetCurrentUser(name)\r\n\t\t})\r\n\t}, [])\r\n\r\n\r\n    // Lógica por turnos: flop, turn, river, fin de juego y sonidos\r\n\tuseEffect(() => {\r\n\t\tif (\r\n\t\t\tuser &&\r\n\t\t\tuser.username &&\r\n\t\t\tplayer1Name !== user.username &&\r\n\t\t\tplayer2Name !== user.username\r\n\t\t) {\r\n\t\t\tif (currentUser === 'Player 1')\r\n\t\t\t\tsocket.emit('updateGameState', { player1Name: user.username })\r\n\t\t\tif (currentUser === 'Player 2')\r\n\t\t\t\tsocket.emit('updateGameState', { player2Name: user.username })\r\n\t\t}\r\n\t\tsocket.emit('updateGameState', {\r\n\t\t\traiseAmount: 0,\r\n\t\t})\r\n\t\tif (numberOfTurns === 2) {\r\n\t\t\tsocket.emit('updateGameState', { increment: 0 })\r\n\t\t\tplayShufflingSound()\r\n\t\t} else if (numberOfTurns === 4) {\r\n\t\t\tsocket.emit('updateGameState', {\r\n\t\t\t\thouseDeck: [...houseDeck, shuffledDeck[0]],\r\n\t\t\t\tincrement: 0,\r\n\t\t\t})\r\n\t\t\tplayCardFlipSound()\r\n\t\t} else if (numberOfTurns === 6) {\r\n\t\t\tsocket.emit('updateGameState', {\r\n\t\t\t\thouseDeck: [...houseDeck, shuffledDeck[1]],\r\n\t\t\t\tincrement: 0,\r\n\t\t\t})\r\n\t\t\tplayCardFlipSound()\r\n\t\t} else if (numberOfTurns === 8) {\r\n\t\t\tsocket.emit('updateGameState', {\r\n\t\t\t\tgameOver: true,\r\n\t\t\t\twinner: getWinner(\r\n\t\t\t\t\tplayer1Name,\r\n\t\t\t\t\tplayer2Name,\r\n\t\t\t\t\tgetHand(player1Deck, houseDeck),\r\n\t\t\t\t\tgetHand(player2Deck, houseDeck)\r\n\t\t\t\t),\r\n\t\t\t})\r\n\t\t}\r\n\r\n    \t// Calcula mano local para el jugador activo\r\n\t\tif (!gameOver && currentUser === 'Player 1')\r\n\t\t\tsetLocalHand(getHand(player1Deck, houseDeck))\r\n\t\telse if (!gameOver && currentUser === 'Player 2')\r\n\t\t\tsetLocalHand(getHand(player2Deck, houseDeck))\r\n\t}, [numberOfTurns])\r\n\r\n\r\n\t//Call / Check\r\n\tasync function callHandler() {\r\n\t\tif (currentUser === 'Player 1') {\r\n\t\t\tsocket.emit('updateGameState', {\r\n\t\t\t\tturn: 'Player 2',\r\n\t\t\t\tplayer1Chips: player1Chips - increment,\r\n\t\t\t\tnumberOfTurns: numberOfTurns + 1,\r\n\t\t\t\tpot: pot + increment,\r\n\t\t\t})\r\n\t\t\tif (increment === 0) playCheckSound()\r\n\t\t\telse playChipsSound()\r\n\t\t} else if (currentUser === 'Player 2') {\r\n\t\t\tsocket.emit('updateGameState', {\r\n\t\t\t\tturn: 'Player 1',\r\n\t\t\t\tplayer2Chips: player2Chips - increment,\r\n\t\t\t\tnumberOfTurns: numberOfTurns + 1,\r\n\t\t\t\tpot: pot + increment,\r\n\t\t\t})\r\n\t\t\tif (increment === 0) playCheckSound()\r\n\t\t\telse playChipsSound()\r\n\t\t}\r\n\t}\r\n\r\n\t// Raise\r\n\tasync function raiseHandler(amount) {\r\n\t\tamount = parseInt(amount)\r\n\r\n\t\tif (currentUser === 'Player 1') {\r\n\t\t\tnumberOfTurns % 2 === 0 &&\r\n\t\t\t\tsocket.emit('updateGameState', {\r\n\t\t\t\t\tturn: 'Player 2',\r\n\t\t\t\t\tincrement: amount,\r\n\t\t\t\t\tplayer1Chips: player1Chips - amount,\r\n\t\t\t\t\tnumberOfTurns: numberOfTurns + 1,\r\n\t\t\t\t\tpot: pot + amount,\r\n\t\t\t\t})\r\n\t\t\tnumberOfTurns % 2 !== 0 &&\r\n\t\t\t\tsocket.emit('updateGameState', {\r\n\t\t\t\t\tturn: 'Player 2',\r\n\t\t\t\t\tincrement: amount - increment,\r\n\t\t\t\t\tplayer1Chips: player1Chips - amount,\r\n\t\t\t\t\tnumberOfTurns: numberOfTurns,\r\n\t\t\t\t\tpot: pot + amount,\r\n\t\t\t\t\traiseAmount: amount,\r\n\t\t\t\t})\r\n\t\t\tplayChipsSound()\r\n\t\t} else if (currentUser === 'Player 2') {\r\n\t\t\tnumberOfTurns % 2 === 0 &&\r\n\t\t\t\tsocket.emit('updateGameState', {\r\n\t\t\t\t\tturn: 'Player 1',\r\n\t\t\t\t\tincrement: amount,\r\n\t\t\t\t\tplayer2Chips: player2Chips - amount,\r\n\t\t\t\t\tnumberOfTurns: numberOfTurns + 1,\r\n\t\t\t\t\tpot: pot + amount,\r\n\t\t\t\t})\r\n\t\t\tnumberOfTurns % 2 !== 0 &&\r\n\t\t\t\tsocket.emit('updateGameState', {\r\n\t\t\t\t\tturn: 'Player 1',\r\n\t\t\t\t\tincrement: amount - increment,\r\n\t\t\t\t\tplayer2Chips: player2Chips - amount,\r\n\t\t\t\t\tnumberOfTurns: numberOfTurns,\r\n\t\t\t\t\tpot: pot + amount,\r\n\t\t\t\t\traiseAmount: amount,\r\n\t\t\t\t})\r\n\t\t\tplayChipsSound()\r\n\t\t}\r\n\t}\r\n\r\n    // Fold\r\n\tfunction foldHandler() {\r\n\t\tif (currentUser === 'Player 1') {\r\n\t\t\tsocket.emit('updateGameState', {\r\n\t\t\t\tgameOver: true,\r\n\t\t\t\twinner: player2Name,\r\n\t\t\t})\r\n\t\t} else if (currentUser === 'Player 2') {\r\n\t\t\tsocket.emit('updateGameState', {\r\n\t\t\t\tgameOver: true,\r\n\t\t\t\twinner: player1Name,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n    // Manejo de reinicio de partida\r\n\tconst [shuffledDeck, setShuffledDeck] = useState('')\r\n\tconst [restart, setRestart] = useState(false)\r\n\r\n\tuseEffect(() => {\r\n\t\tif (\r\n\t\t\tgameOver === true &&\r\n\t\t\twinner !== player1Name &&\r\n\t\t\twinner !== player2Name &&\r\n\t\t\twinner !== 'Tie'\r\n\t\t) {\r\n\t\t\tsocket.emit('updateGameState', {\r\n\t\t\t\twinner: getWinner(\r\n\t\t\t\t\tplayer1Name,\r\n\t\t\t\t\tplayer2Name,\r\n\t\t\t\t\tgetHand(player1Deck, houseDeck),\r\n\t\t\t\t\tgetHand(player2Deck, houseDeck)\r\n\t\t\t\t),\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (restart === true) {\r\n\t\t\tconst shuffledCards = shuffleArray(DECK_OF_CARDS)\r\n\t\t\tconst player1Deck = shuffledCards.splice(0, 2)\r\n\t\t\tconst player2Deck = shuffledCards.splice(0, 2)\r\n\t\t\tconst houseDeck = shuffledCards.splice(0, 3)\r\n\r\n\t\t\tif (winner === player1Name) {\r\n\t\t\t\tsocket.emit('initGameState', {\r\n\t\t\t\t\tgameOver: false,\r\n\t\t\t\t\tturn: 'Player 1',\r\n\t\t\t\t\tplayer1Deck: [...player1Deck],\r\n\t\t\t\t\tplayer2Deck: [...player2Deck],\r\n\t\t\t\t\thouseDeck: [...houseDeck],\r\n\t\t\t\t\tplayer1Chips: player1Chips + pot,\r\n\t\t\t\t\tplayer2Chips: player2Chips,\r\n\t\t\t\t\tincrement: 10,\r\n\t\t\t\t\tnumberOfTurns: 0,\r\n\t\t\t\t\twinner: '',\r\n\t\t\t\t\tpot: 0,\r\n\t\t\t\t\tplayer1Name: player1Name,\r\n\t\t\t\t\tplayer2Name: player2Name,\r\n\t\t\t\t})\r\n\t\t\t} else if (winner === player2Name) {\r\n\t\t\t\tsocket.emit('initGameState', {\r\n\t\t\t\t\tgameOver: false,\r\n\t\t\t\t\tturn: 'Player 2',\r\n\t\t\t\t\tplayer1Deck: [...player1Deck],\r\n\t\t\t\t\tplayer2Deck: [...player2Deck],\r\n\t\t\t\t\thouseDeck: [...houseDeck],\r\n\t\t\t\t\tplayer1Chips: player1Chips,\r\n\t\t\t\t\tplayer2Chips: player2Chips + pot,\r\n\t\t\t\t\tincrement: 10,\r\n\t\t\t\t\tnumberOfTurns: 0,\r\n\t\t\t\t\twinner: '',\r\n\t\t\t\t\tpot: 0,\r\n\t\t\t\t\tplayer1Name: player1Name,\r\n\t\t\t\t\tplayer2Name: player2Name,\r\n\t\t\t\t})\r\n\t\t\t} else if (winner === 'Tie') {\r\n\t\t\t\tsocket.emit('initGameState', {\r\n\t\t\t\t\tgameOver: false,\r\n\t\t\t\t\tturn: 'Player 1',\r\n\t\t\t\t\tplayer1Deck: [...player1Deck],\r\n\t\t\t\t\tplayer2Deck: [...player2Deck],\r\n\t\t\t\t\thouseDeck: [...houseDeck],\r\n\t\t\t\t\tplayer1Chips: player1Chips + pot / 2,\r\n\t\t\t\t\tplayer2Chips: player2Chips + pot / 2,\r\n\t\t\t\t\tincrement: 10,\r\n\t\t\t\t\tnumberOfTurns: 0,\r\n\t\t\t\t\twinner: '',\r\n\t\t\t\t\tpot: 0,\r\n\t\t\t\t\tplayer1Name: 'Player 1',\r\n\t\t\t\t\tplayer2Name: 'Player 2',\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t// similar a la inicialización\r\n\t\t\tsetRestart(false)\r\n\t\t\tsetShuffledDeck(shuffledCards.splice(0, 2))\r\n\t\t}\r\n\t}, [restart])\r\n\r\n\tif (users.length < 2) return <h1>Waiting...</h1>\r\n\r\n\treturn (\r\n\t\t<div className='game-bg noselect'>\r\n\t\t\t<div className='game-board'>\r\n\t\t\t\t<Box\r\n\t\t\t\t\tposition='absolute'\r\n\t\t\t\t\ttop='0.3125rem'\r\n\t\t\t\t\tleft='0.3125rem'\r\n\t\t\t\t\ttranslate='transform(-0.3125rem, -0.3125rem)'\r\n\t\t\t\t\tbackgroundColor='whitesmoke'\r\n\t\t\t\t\tcolor='black'\r\n\t\t\t\t\tpadding='0.5rem'\r\n\t\t\t\t\tborderRadius='0.25rem'\r\n\t\t\t\t>\r\n\t\t\t\t\t<Heading size='md' fontFamily='inherit'>\r\n\t\t\t\t\t\tRoom Code: {data.roomCode}\r\n\t\t\t\t\t</Heading>\r\n\t\t\t\t</Box>\r\n\t\t\t\t<Cards\r\n\t\t\t\t\tnumberOfTurns={numberOfTurns}\r\n\t\t\t\t\tplayer1Deck={player1Deck}\r\n\t\t\t\t\tplayer2Deck={player2Deck}\r\n\t\t\t\t\thouseDeck={houseDeck}\r\n\t\t\t\t\tgameOver={gameOver}\r\n\t\t\t\t\tcurrentUser={currentUser}\r\n\t\t\t\t\tplayer1Chips={player1Chips}\r\n\t\t\t\t\tplayer2Chips={player2Chips}\r\n\t\t\t\t\tturn={turn}\r\n\t\t\t\t\tplayer1Name={player1Name}\r\n\t\t\t\t\tplayer2Name={player2Name}\r\n\t\t\t\t\twinner={winner}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Flex justify='center' align='center' w='100%' mt='1rem'>\r\n\t\t\t\t\t<Heading size='md' fontFamily='inherit' style={{ color: '#FFD700' }}>\r\n\t\t\t\t\t\tPot ​💰​: {pot}\r\n\t\t\t\t\t</Heading>\r\n\t\t\t\t</Flex>\r\n\t\t\t\t<HStack\r\n\t\t\t\t\tm='1rem'\r\n\t\t\t\t\tjustify='center'\r\n\t\t\t\t\talign='center'\r\n\t\t\t\t\tspacing='1rem'\r\n\t\t\t\t\tcolor='black'\r\n\t\t\t\t>\r\n\t\t\t\t\t{!gameOver && (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tisDisabled={\r\n\t\t\t\t\t\t\t\t\tcurrentUser !== turn ||\r\n\t\t\t\t\t\t\t\t\t(currentUser === 'Player 2' && player2Chips < increment) ||\r\n\t\t\t\t\t\t\t\t\t(currentUser === 'Player 1' && player1Chips < increment) ||\r\n\t\t\t\t\t\t\t\t\tgameOver\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvariant='solid'\r\n\t\t\t\t\t\t\t\tborder='2px solid black'\r\n\t\t\t\t\t\t\t\tsize='md'\r\n\t\t\t\t\t\t\t\tw='10rem'\r\n\t\t\t\t\t\t\t\tonClick={() => callHandler()}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{(raiseAmount === 0 &&\r\n\t\t\t\t\t\t\t\t\tincrement &&\r\n\t\t\t\t\t\t\t\t\tnumberOfTurns < 2 &&\r\n\t\t\t\t\t\t\t\t\t`Buy In(${increment})`) ||\r\n\t\t\t\t\t\t\t\t\t(raiseAmount === 0 && increment && `Call(${increment})`) ||\r\n\t\t\t\t\t\t\t\t\t(raiseAmount > 0 && `Call(${raiseAmount})`) ||\r\n\t\t\t\t\t\t\t\t\t'Check'}\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<RaiseModal\r\n\t\t\t\t\t\t\t\tminRaise={raiseAmount > 0 ? raiseAmount : increment}\r\n\t\t\t\t\t\t\t\tmaxRaise={\r\n\t\t\t\t\t\t\t\t\tcurrentUser === 'Player 1' ? player1Chips : player2Chips\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tinitialValue={raiseAmount > 0 ? raiseAmount + increment : null}\r\n\t\t\t\t\t\t\t\tisDisabled={turn !== currentUser || gameOver}\r\n\t\t\t\t\t\t\t\tcallHandler={() => {\r\n\t\t\t\t\t\t\t\t\tcallHandler()\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\traiseHandler={(amount) => {\r\n\t\t\t\t\t\t\t\t\traiseHandler(amount)\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tisDisabled={currentUser !== turn || gameOver}\r\n\t\t\t\t\t\t\t\tcolorScheme='red'\r\n\t\t\t\t\t\t\t\tvariant='solid'\r\n\t\t\t\t\t\t\t\tborder='2px solid black'\r\n\t\t\t\t\t\t\t\tsize='md'\r\n\t\t\t\t\t\t\t\tw='10rem'\r\n\t\t\t\t\t\t\t\tonClick={() => foldHandler()}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tFold\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t{gameOver && (\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tisLoading={restart}\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetRestart(true)\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tw='10rem'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tRestart\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</HStack>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Game\r\n","/**\r\n * Componente Verify:\r\n * ------------------\r\n * Este componente verifica la cuenta de usuario a través de un parámetro de consulta `id`:\r\n *  - Extrae `id` de la query string (props.location.search) con `query-string`.\r\n *  - En el `useEffect`, envía una petición GET a `/auth/verify/{id}`:\r\n *      • Si la respuesta es 200, marca `verified = true`.\r\n *      • Siempre deja `loading = false` tras la petición.\r\n *  - Renderizado condicional:\r\n *      • Mientras `loading` es true: muestra “Loading...”.\r\n *      • Si `verified` es true: muestra mensaje de éxito y enlace a la página principal.\r\n *      • Si `verified` es false: muestra mensaje de error y sugiere registrarse de nuevo.\r\n */\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport queryString from 'query-string'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst url = process.env.REACT_APP_ENDPOINT\r\n\r\nexport default function Verify(props) {\r\n    const [loading, setLoading] = useState(true)\r\n    const [verified, setVerified] = useState(false)\r\n    var { id } = queryString.parse(props.location.search)\r\n\r\n    useEffect(() => {\r\n            if (loading) {\r\n                fetch(`${url}/auth/verify/${id}`, {\r\n                    method: 'GET',\r\n                    credentials: 'include',\r\n                }).then(res => { \r\n                    if (res.status===200) setVerified(true)\r\n                    setLoading(false)\r\n                })\r\n            }\r\n        }, [])\r\n\r\n    if (loading) return(<h1>Loading...</h1>)\r\n\r\n    if (verified) return (\r\n        <>\r\n        <h1>Verified</h1>\r\n        <h1>Return to <Link style={{ color: 'blue', textDecoration: 'underline' }} to='/'>homepage</Link> to sign in</h1>\r\n        </>\r\n    )\r\n\r\n    if (!verified) return (\r\n        <>\r\n        <h1>Error: User not found, you may already be verified</h1>\r\n        <h1>Return to <Link style={{ color: 'blue', textDecoration: 'underline' }} to='/'>homepage</Link> to sign up again</h1>\r\n        </>\r\n    )\r\n}\r\n\r\n","/**\r\n * Componente raíz de la aplicación React de Poker Royal\r\n *\r\n * Este archivo configura:\r\n * - Rutas principales usando React Router:\r\n *   • “/”       → Homepage (pantalla de inicio)\r\n *   • “/play”   → Game     (interfaz de partida)\r\n *   • “/verify” → Verify   (confirmación de email después de signup)\r\n * - Contexto de usuario global (UserContext) para compartir estado de autenticación.\r\n * - Tema global con Chakra UI para estilos (fondo semitransparente, texto blanco).\r\n * - Carga inicial: llama al endpoint `/auth/` para comprobar si hay sesión activa,\r\n *   almacenando los datos del usuario en estado. Muestra un mensaje “Loading…” mientras espera.\r\n * - Variables de entorno para la URL del backend (`REACT_APP_ENDPOINT`).\r\n */\r\n\r\nimport { Route } from 'react-router-dom';\r\nimport Homepage from './components/Homepage/Homepage';\r\nimport Game from './components/Game/Game';\r\nimport Verify from './components/auth/Verify';\r\nimport './App.css';\r\nimport './cards.css';\r\nimport './game.css';\r\nimport { UserContext } from './utils/UserContext';\r\nimport { useState, useEffect } from 'react';\r\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react';\r\n\r\n// Definición de tema global para Chakra UI\r\nconst theme = extendTheme({\r\n  styles: {\r\n    global: {\r\n      body: {\r\n        bg: 'whiteAlpha.200',\r\n        color: 'white',\r\n        m: 0,\r\n        p: 0,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  const url = process.env.REACT_APP_ENDPOINT;\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Efecto de carga inicial para verificar sesión\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        await fetch(`${url}/auth/`, {\r\n          method: 'GET',\r\n          credentials: 'include',\r\n          mode: 'cors',\r\n        })\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            if (data.user) setUser(data.user);\r\n          });\r\n      } catch (error) {\r\n        console.error(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    if (loading) fetchData();\r\n  }, [url, loading]);\r\n\r\n  if (loading) return <h1>Loading...</h1>;\r\n\r\n  return (\r\n    <div className='App'>\r\n      <UserContext.Provider value={{ user, setUser }}>\r\n        <ChakraProvider theme={theme}>\r\n          <Route path='/' exact component={Homepage} />\r\n          <Route path='/play' exact component={Game} />\r\n          <Route path='/verify' exact component={Verify} />\r\n        </ChakraProvider>\r\n      </UserContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","/**\r\n * Punto de entrada de la aplicación React\r\n *\r\n * Este archivo:\r\n * - Importa React y ReactDOM para renderizar componentes.\r\n * - Envuelve el componente raíz <App /> en <BrowserRouter> para habilitar\r\n *   el enrutamiento basado en la historia del navegador.\r\n * - Usa React.StrictMode para activar comprobaciones adicionales en desarrollo.\r\n * - Monta la aplicación en el elemento DOM con id=\"root\".\r\n */\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}